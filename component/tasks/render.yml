# NOTE: This set of tasks can be called by either component/tasks/main or package/tasks/render
# The pre-requisite is that the component instance properties hash 'c_this' has been set
---
- name: '[render] {{ instance_task_name }} Debug the component instance properties'
  debug: var='{{ item }}'
  with_items: [var_names, c_this]
  tags: debug

- name: '[render] {{ instance_task_name }} Set the provision properties'
  set_fact:
    provision:
      provider: '{{ package.provider | combine(c_this.class.vars.provider | default({})) | combine(c_this.vars.provider | default({})) }}'
      remote_state: '{{ package.remote_state | combine(c_this.class.vars.remote_state | default({})) | combine(c_this.vars.remote_state | default({})) }}'
      remote_states: '{{ c_this.vars.remote_states | default({}) }}'
      # remote_states: '{{ component.remote_states | default({}) | combine(component_instance.remote_states | default({})) }}'

- name: '[render] {{ instance_task_name }} Debug the provision properties'
  debug: var='{{ item }}'
  with_items: [component_dir, instance_dir, provision]
  tags: debug

- name: '[render] {{ instance_task_name }} Ensure the component and instance directory trees exist'
  file:
    path: '{{ item }}'
    state: directory
  with_items: ['{{ component_dir }}', '{{ instance_dir }}']

- name: '[render] {{ instance_task_name }} Template the Provider and Remote States'
  template:
    src: component.tf.j2
    dest: '{{ component_dir }}/component.tf'

- name: '[render] {{ instance_task_name }} Add terragrunt config to tfvars'
  blockinfile:
    create: yes
    dest: '{{ tfvars_file }}'
    marker: '# {mark} ANSIBLE MANAGED BLOCK (component)'
    block: |
      terragrunt = {
        terraform {
          source = "{{ component_path }}"
          extra_arguments "secrets" {
            arguments = [
              "-var-file={{ credentials_dir }}/terraform/{{ provision.provider.credential }}.tfvars",
            ]
            commands = [
              "apply", "plan", "import", "push", "refresh", "destroy"
            ]
          }
        }
        include = {
          path = "${find_in_parent_folders()}"
        }
      {% if c_this.vars.dependencies is defined %}
        dependencies {
          paths = [
      {% for item in c_this.vars.dependencies %}
            "../../{{ item }}",
      {% endfor %}
          ]
        }
      {% endif %}
      }
      region = "{{ provision.provider.region }}"

      remote_state_bucket = "{{ provision.remote_state.bucket }}"
      remote_state_region = "{{ provision.remote_state.region }}"
      {% for key, value in provision.remote_states.iteritems() %}
      {% if value.startswith('global') %}
      remote_state_key_{{ key | replace('-', '_') }} = "{{ value }}"
      {% elif value.split('/') | length == 1 %}
      remote_state_key_{{ key | replace('-', '_') }} = "{{ package.directory }}/{{ infrastructure_env }}/{{ instance_meta.name }}/{{ value }}"
      {% else %}
      remote_state_key_{{ key | replace('-', '_') }} = "{{ package.directory }}/{{ infrastructure_env }}/{{ value }}"
      {% endif %}
      {% endfor %}
